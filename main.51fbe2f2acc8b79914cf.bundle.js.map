{"version":3,"file":"main.51fbe2f2acc8b79914cf.bundle.js","sources":["webpack:///./components/CountDown/index.tsx"],"sourcesContent":["import React from 'react';\n\nfunction fixedZero(val: number) {\n  return val * 1 < 10 ? `0${val}` : val;\n}\nconst initTime = (props: ICountDownProps) => {\n  let lastTime = 0;\n  let targetTime = 0;\n  try {\n    if (Object.prototype.toString.call(props.target) === '[object Date]') {\n      targetTime = (props.target as Date).getTime();\n    } else {\n      targetTime = new Date(props.target).getTime();\n    }\n  } catch (e) {\n    throw new Error(`invalid target prop ${e}`);\n  }\n\n  lastTime = targetTime - new Date().getTime();\n  return {\n    lastTime: lastTime < 0 ? 0 : lastTime,\n  };\n};\n\nexport interface ICountDownProps {\n  format?: (time: number) => string | React.ReactNode;\n  target: Date | number;\n  onEnd?: () => void;\n  style?: React.CSSProperties;\n}\n\nexport default class CountDown extends React.Component<ICountDownProps, any> {\n  timer = 0;\n\n  interval = 1000;\n\n  constructor(props: ICountDownProps) {\n    super(props);\n    const { lastTime } = initTime(props);\n    this.state = {\n      lastTime,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: ICountDownProps, preState: any) {\n    const { lastTime } = initTime(nextProps);\n    if (preState.lastTime !== lastTime) {\n      return {\n        lastTime,\n      };\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  componentDidUpdate(prevProps: ICountDownProps) {\n    const { target } = this.props;\n    if (target !== prevProps.target) {\n      clearTimeout(this.timer);\n      this.tick();\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  defaultFormat = (time: number) => {\n    const hours = 60 * 60 * 1000;\n    const minutes = 60 * 1000;\n\n    const h = Math.floor(time / hours);\n    const m = Math.floor((time - h * hours) / minutes);\n    const s = Math.floor((time - h * hours - m * minutes) / 1000);\n    return (\n      <span>\n        {fixedZero(h)}:{fixedZero(m)}:{fixedZero(s)}\n      </span>\n    );\n  };\n\n  tick = () => {\n    const { onEnd } = this.props;\n    let { lastTime } = this.state;\n\n    this.timer = window.setTimeout(() => {\n      if (lastTime < this.interval) {\n        clearTimeout(this.timer);\n        this.setState(\n          {\n            lastTime: 0,\n          },\n          () => {\n            if (onEnd) {\n              onEnd();\n            }\n          }\n        );\n      } else {\n        lastTime -= this.interval;\n        this.setState(\n          {\n            lastTime,\n          },\n          () => {\n            this.tick();\n          }\n        );\n      }\n    }, this.interval);\n  };\n\n  render() {\n    const { format = this.defaultFormat, onEnd, ...rest } = this.props;\n    const { lastTime } = this.state;\n    const result = format(lastTime);\n\n    return <span {...rest}>{result}</span>;\n  }\n}"],"mappings":"AAEA","sourceRoot":""}